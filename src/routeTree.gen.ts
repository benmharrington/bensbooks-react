/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as BooksImport } from './routes/books'
import { Route as AuthorsImport } from './routes/authors'
import { Route as AboutImport } from './routes/about'
import { Route as IndexImport } from './routes/index'
import { Route as BooksIndexImport } from './routes/books/index'
import { Route as AuthorsIndexImport } from './routes/authors/index'
import { Route as BooksBookIdImport } from './routes/books/$bookId'
import { Route as AuthorsAuthorIdImport } from './routes/authors/$authorId'

// Create/Update Routes

const BooksRoute = BooksImport.update({
  id: '/books',
  path: '/books',
  getParentRoute: () => rootRoute,
} as any)

const AuthorsRoute = AuthorsImport.update({
  id: '/authors',
  path: '/authors',
  getParentRoute: () => rootRoute,
} as any)

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const BooksIndexRoute = BooksIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => BooksRoute,
} as any)

const AuthorsIndexRoute = AuthorsIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthorsRoute,
} as any)

const BooksBookIdRoute = BooksBookIdImport.update({
  id: '/$bookId',
  path: '/$bookId',
  getParentRoute: () => BooksRoute,
} as any)

const AuthorsAuthorIdRoute = AuthorsAuthorIdImport.update({
  id: '/$authorId',
  path: '/$authorId',
  getParentRoute: () => AuthorsRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/authors': {
      id: '/authors'
      path: '/authors'
      fullPath: '/authors'
      preLoaderRoute: typeof AuthorsImport
      parentRoute: typeof rootRoute
    }
    '/books': {
      id: '/books'
      path: '/books'
      fullPath: '/books'
      preLoaderRoute: typeof BooksImport
      parentRoute: typeof rootRoute
    }
    '/authors/$authorId': {
      id: '/authors/$authorId'
      path: '/$authorId'
      fullPath: '/authors/$authorId'
      preLoaderRoute: typeof AuthorsAuthorIdImport
      parentRoute: typeof AuthorsImport
    }
    '/books/$bookId': {
      id: '/books/$bookId'
      path: '/$bookId'
      fullPath: '/books/$bookId'
      preLoaderRoute: typeof BooksBookIdImport
      parentRoute: typeof BooksImport
    }
    '/authors/': {
      id: '/authors/'
      path: '/'
      fullPath: '/authors/'
      preLoaderRoute: typeof AuthorsIndexImport
      parentRoute: typeof AuthorsImport
    }
    '/books/': {
      id: '/books/'
      path: '/'
      fullPath: '/books/'
      preLoaderRoute: typeof BooksIndexImport
      parentRoute: typeof BooksImport
    }
  }
}

// Create and export the route tree

interface AuthorsRouteChildren {
  AuthorsAuthorIdRoute: typeof AuthorsAuthorIdRoute
  AuthorsIndexRoute: typeof AuthorsIndexRoute
}

const AuthorsRouteChildren: AuthorsRouteChildren = {
  AuthorsAuthorIdRoute: AuthorsAuthorIdRoute,
  AuthorsIndexRoute: AuthorsIndexRoute,
}

const AuthorsRouteWithChildren =
  AuthorsRoute._addFileChildren(AuthorsRouteChildren)

interface BooksRouteChildren {
  BooksBookIdRoute: typeof BooksBookIdRoute
  BooksIndexRoute: typeof BooksIndexRoute
}

const BooksRouteChildren: BooksRouteChildren = {
  BooksBookIdRoute: BooksBookIdRoute,
  BooksIndexRoute: BooksIndexRoute,
}

const BooksRouteWithChildren = BooksRoute._addFileChildren(BooksRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/authors': typeof AuthorsRouteWithChildren
  '/books': typeof BooksRouteWithChildren
  '/authors/$authorId': typeof AuthorsAuthorIdRoute
  '/books/$bookId': typeof BooksBookIdRoute
  '/authors/': typeof AuthorsIndexRoute
  '/books/': typeof BooksIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/authors/$authorId': typeof AuthorsAuthorIdRoute
  '/books/$bookId': typeof BooksBookIdRoute
  '/authors': typeof AuthorsIndexRoute
  '/books': typeof BooksIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/authors': typeof AuthorsRouteWithChildren
  '/books': typeof BooksRouteWithChildren
  '/authors/$authorId': typeof AuthorsAuthorIdRoute
  '/books/$bookId': typeof BooksBookIdRoute
  '/authors/': typeof AuthorsIndexRoute
  '/books/': typeof BooksIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/authors'
    | '/books'
    | '/authors/$authorId'
    | '/books/$bookId'
    | '/authors/'
    | '/books/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/authors/$authorId'
    | '/books/$bookId'
    | '/authors'
    | '/books'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/authors'
    | '/books'
    | '/authors/$authorId'
    | '/books/$bookId'
    | '/authors/'
    | '/books/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  AuthorsRoute: typeof AuthorsRouteWithChildren
  BooksRoute: typeof BooksRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  AuthorsRoute: AuthorsRouteWithChildren,
  BooksRoute: BooksRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/authors",
        "/books"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/authors": {
      "filePath": "authors.tsx",
      "children": [
        "/authors/$authorId",
        "/authors/"
      ]
    },
    "/books": {
      "filePath": "books.tsx",
      "children": [
        "/books/$bookId",
        "/books/"
      ]
    },
    "/authors/$authorId": {
      "filePath": "authors/$authorId.tsx",
      "parent": "/authors"
    },
    "/books/$bookId": {
      "filePath": "books/$bookId.tsx",
      "parent": "/books"
    },
    "/authors/": {
      "filePath": "authors/index.tsx",
      "parent": "/authors"
    },
    "/books/": {
      "filePath": "books/index.tsx",
      "parent": "/books"
    }
  }
}
ROUTE_MANIFEST_END */
